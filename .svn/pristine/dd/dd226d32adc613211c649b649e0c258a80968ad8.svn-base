<?php
namespace Modules\Admin\Http\Controllers;

use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Redirect;
use App\Http\Requests;
use Illuminate\Http\Request;
use Modules\Admin\Http\Requests\UserRequest;
use Modules\Admin\Http\Requests\CorporateProfileRequest;
use Modules\Admin\Models\User;
use Modules\Admin\Models\CorporateProfile;
use Modules\Admin\Models\Criteria;
use Input;
use Validator;
use Auth;
use Paginate;
use Grids;
use HTML;
use Form;
use View;
use URL;
use Lang;
use App\Http\Controllers\Controller;
use App\Helpers\Helper as Helper;
use Modules\Admin\Models\Interview;
/**
 * Class AdminController
 */
class CorporateProfileController extends Controller {
    /**
     * @var  Repository
     */
   
    /**
     * Displays all admin.
     *
     * @return \Illuminate\View\View
     */
    public function __construct() {
        $this->middleware('admin');
        View::share('viewPage', 'Corporate Profile');
        $this->record_per_page = Config::get('app.record_per_page');
    }
    protected $criteria;
    /*
     * Dashboard
     * */
    public function index(CorporateProfile $corporateProfile, Request $request) {

        $page_title = 'Corporate Profile';
        $page_action = 'View Corporate Profile'; 
        $search = Input::get('search');
        if (isset($search) && !empty($search)) {

            $search = isset($search) ? Input::get('search') : ''; 
            $corporateProfile = CorporateProfile::with('user')
                        ->selectRaw('count(*) as count,company_name,id,company_url,created_at')
                        ->orderBy('id','desc')->groupBy('company_url')
                        ->where(function($query) use($search) {
                        if (!empty($search)) {
                            $query->Where('company_name', 'LIKE', "%$search%");
                            $query->orWhere('company_url', 'LIKE', "%$search%");  
                        }
 
                    })->Paginate($this->record_per_page);
        } else { 
            $corporateProfile = CorporateProfile::with('user')->selectRaw('count(*) as count,company_name,id,company_url,created_at')->orderBy('id','desc')->groupBy('company_url')->Paginate($this->record_per_page);

        } 
        //dd($corporateProfile);
        return view('packages::corporateProfile.index', compact('corporateProfile', 'page_title', 'page_action'));
    }

    /*
     * create Group method
     * */

    public function create(Criteria $criteria) 
    {
      }

    /*
     * Save Group method
     * */

    public function store(CorporateProfileRequest $request, CorporateProfile $corporateProfile) 
    {
    }

    /*
     * Edit Group method
     * @param 
     * object : $user
     * */

    public function edit(corporateProfile $corporateProfile) {
      }

    public function update(CriteriaRequest $request, Criteria $criteria) {
    }
    /*
     *Delete User
     * @param ID
     * 
     */
    public function destroy(CorporateProfile $corporateProfile) {

        
    }
    
    /* @method : Get Directory
    * @param : Interviewer ID
    * Response : json
    * Return :  
    */
    public function show(Request $request ,corporateProfile $corporateProfile,$id)
    { 
        $user_id =  $request->id;
        $is_user_exist = Helper::isUserExist($user_id);

        if(!$is_user_exist){
            return  [ 
                    "status"    =>  0,
                    "message"   =>  "Record not found",
                    'data'      =>  ""
                   ]
                 ;
        }
        $corp_profile       = CorporateProfile::where('userID',$user_id)->get();
        $corp_profile_name  = $corp_profile->lists('company_url','userID');


        $user_from_same_company = CorporateProfile::where('company_url',$corp_profile_name[$user_id])->get();
        
        $get_interviewer_list = User::whereIn('userID', $user_from_same_company->lists('userID'))
                                     ->where('status',1)->get();

                                        
        $condidate =  Interview::whereRaw('FIND_IN_SET('.$user_id.',interviewerID)')->get();
        if($condidate->count()==0)
        {
           return  response()->json([ 
                    "status"    =>  0,
                    "message"   =>  "Directory data not found",
                    'data'      =>  ""
                   ]
                ); 
        }    

        $my_data = [];
        foreach ($condidate as $key => $condidate_record) {
            
            $interviewer_data = Helper::getInterviewerFromInterview($condidate_record->interviewerID);
            
            $my_data[] =   [
                            'condidateName' =>  $condidate_record->condidate_name,
                            'condidateID' =>  $condidate_record->id,
                            'shortDescription' => $condidate_record->short_description,
                            'comment'   =>    $condidate_record->comment,
                            'rating'    => Helper::getRatingByCondidateID($condidate_record->id),
                            'interviewer' => [$interviewer_data]
                        ];

        }
        $temp_data = [];
        $condidate =''; 
        $data= [];
        foreach ($user_from_same_company as $key => $user_record) {
            $condidate =  Interview::whereRaw('FIND_IN_SET('.$user_record->userID.',interviewerID)')->get();
            
            foreach ($condidate as $key => $condidate_record) {
            
            $interviewer_all_data = Helper::getInterviewerFromInterview($condidate_record->interviewerID);

            
             $temp_data[] =   [
                            'condidateName' =>  $condidate_record->condidate_name,
                            'condidateID' =>  $condidate_record->id,
                            'shortDescription' => $condidate_record->short_description,
                            'comment'   =>    $condidate_record->comment,
                            'rating'    => Helper::getRatingByCondidateID($condidate_record->id),
                            'interviewer' => [$interviewer_all_data]
                        ]; 

            }
        }

        $all_data = array();
        foreach ($temp_data as $key => $value) {
                 $all_data[$value['condidateID']] = $value;

            }
        foreach ($all_data as $key => $value) {
               
               $data[] =   $value;   
        }        
    
        $condidates = $data ;
        $page_title ="Condidate Directory";
        $page_action = "View";
        return view('packages::corporateProfile.condidate', compact('condidates', 'page_title', 'page_action'));
    
        return  response()->json([ 
                    "status"=>1,
                    "code"=> 200,
                    "message"=>"Record found successfully.",
                    'data' => ['all'=>$data,'mine'=>$my_data]
                   ]
                ); 

    }
    

}

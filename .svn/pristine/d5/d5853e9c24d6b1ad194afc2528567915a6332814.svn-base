<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Log\Writer;
use Monolog\Logger as Monolog;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Support\Facades\Storage;
use App\Http\Requests; 
use App\Http\Controllers\Controller;
use Illuminate\Contracts\Encryption\DecryptException;
use App\Helpers\Helper as Helper;
use App\Criteria;
use App\Interview;
use App\User;
use App\Position;
use Config;
use View;
use Redirect; 
use Validator;
use Response;
use Auth;
use Crypt;
use Cookie;
use Hash;
use Lang;
use JWTAuth;
use Input;
use Closure;
use URL;


class APIController extends Controller
{
	
   /* @method : validateUser
	* @param : email,password,firstName,lastName
	* Response : json
	* Return : token and user details
	* Author : kundan Roy
	* Calling Method : get	
    */

    
    public function validateUser(Request $request,User $user){

        $input['first_name']    = $request->get('firstName');
        $input['last_name']     = $request->get('lastName'); 
        $input['email']         = $request->get('email'); 
        $input['password']      = Hash::make($request->get('password'));
        $input['deviceID']      = ($request->get('deviceID'))?$request->get('deviceID'):'';
         //Server side valiation
        $validator = Validator::make($request->all(), [
            'email' => 'required|email|unique:t_user' 
        ]);
        // Return Error Message
        if ($validator->fails()) {
                    $error_msg  =   [];
            foreach ( $validator->messages()->all() as $key => $value) {
                        array_push($error_msg, $value);     
                    }
                            
            return Response::json(array(
                'status' => 0,
                'message' => $error_msg[0],
                'data'  =>  ''
                )
            );
        }
        $helper = new Helper;
        $group_name =  $helper->getCorporateGroupName($input['email']);
        $email_allow = array('gmail','yahoo','ymail','aol','hotmail');

        if(in_array($group_name, $email_allow))
        {
           return Response::json(array(
                'status' => 0,
                'message' => 'Only corporate email allowed.',
                'data'  =>  ''
                )
            ); 
        }

        return response()->json(
                            [ 
                                "status"=>1,
                                "message"=>"User validated successfully.",
                                'data'=>$request->all()
                            ]
                        );  
    }   

   /* @method : register
    * @param : email,password,deviceID,firstName,lastName
    * Response : json
    * Return : token and user details
    * Author : kundan Roy
    * Calling Method : get  
    */

    public function register(Request $request,User $user)
    {       
        $input['first_name'] 	= $request->get('firstName');
    	$input['last_name'] 	= $request->get('lastName'); 
    	$input['email'] 		= $request->get('email'); 
    	$input['password'] 	    = Hash::make($request->get('password'));
    	$input['deviceID'] 	    = ($request->get('deviceID'))?$request->get('deviceID'):'';
        $input['positionID']    = ($request->get('positionName'))?$request->get('positionName'):'';


        //Server side valiation
        $validator = Validator::make($request->all(), [
            'email' => 'required|email|unique:t_user',
            'positionName' => 'required'
        ]);
        /** Return Error Message **/
        if ($validator->fails()) {
                   	$error_msg	=	[];
	        foreach ( $validator->messages()->all() as $key => $value) {
	        			array_push($error_msg, $value);		
	        		}
	        		 		
          	return Response::json(array(
	          	'status' => 0,
	            'message' => $error_msg[0],
	            'data'	=>	''
	            )
          	);
        }  

        //echo json_encode($input); die;
        $helper = new Helper;
        // Create USER
        $user = User::create($input); 
        // Create Company Group
        $data = ['userID'=>$user->userID,'name'=>$user['name'],'email'=>$user['email'],'firstName'=>$user['first_name'],'lastName'=>$user['last_name']];
       // dd($data);
        $helper->createCompanyGroup($request->get('email'),$user->userID);
        // Send Mail after Sign Up
        $email_content = array('receipent_email'=> $request->get('email'),'subject'=>'Signup email verification');
        $verification_email = $helper->sendMailFrontEnd($email_content,'verification_link',['name'=> $request->get('firstName')]);
        
        return response()->json(
                            [ 
                                "status"=>1,
                                "message"=>"Registration success.Please verify your email.",
                                'data'=>$request->except('password')
                            ]
                        );
    }


   public function updateProfile(Request $request,User $user)
    {       
        $user= User::find(2);

        $user->first_name    = $request->get('firstName');
        $user->last_name     = $request->get('lastName'); 
        $user->email         = $request->get('email'); 
        $user->password      = Hash::make($request->get('password'));
        $user->deviceID      = ($request->get('deviceID'))?$request->get('deviceID'):'';
        $user->positionID    = ($request->get('positionName'))?$request->get('positionName'):'';

        if(empty($request->get('userID')))
        {
            return Response::json(array(
                'status' => 0,
                'message' => 'UserID required',
                'data'  =>  ''
                )
            );
        } 

        //Server side valiation
        $validator = Validator::make($request->all(), [
            'email' => 'required|email',
            'positionName' => 'required'
        ]);
        /** Return Error Message **/
        if ($validator->fails()) {
                    $error_msg  =   [];
            foreach ( $validator->messages()->all() as $key => $value) {
                        array_push($error_msg, $value);     
                    }
                            
            return Response::json(array(
                'status' => 0,
                'message' => $error_msg[0],
                'data'  =>  ''
                )
            );
        } 

        //echo json_encode($input); die;
        $helper = new Helper;
        // Create USER
         $user->save(); 
         
        $data = ['userID'=>$user->userID,'name'=>$user['name'],'email'=>$user['email'],'firstName'=>$user['first_name'],'lastName'=>$user['last_name']];
       
        return response()->json(
                            [ 
                                "status"=>1,
                                "message"=>"Profile updated successfully.",
                                'data'=>$request->except('password')
                            ]
                        );
    }

   /* @method : login
	* @param : email,password and deviceID
	* Response : json
	* Return : token and user details
	* Author : kundan Roy	
    */
    public function login(Request $request)
    {
    	$input = $request->all();
       // dd($input);
    	if (!$token = JWTAuth::attempt(['email'=>$request->get('email'),'password'=>$request->get('password')])) {
            return response()->json([ "status"=>0,"message"=>"Invalid email or password.Try again !" ,'data' => '' ]);
        }
        

        $user = JWTAuth::toUser($token); 
        $data['deviceToken'] = $token;
        $data['userID'] = $user->userID;
        $data['firstName'] = $user->first_name;
        $data['lastName'] = $user->last_name;
        $data['email'] = $user->email;

        if(!$user->status)
        {
            return response()->json([ "status"=>0,"message"=>"Your email is not verified" ,'data' => '' ]);   
        }
        $user = User::find($user->userID);
        $user->deviceID  = $request->get('deviceID');
        $user->save();

    	return response()->json([ "status"=>1,"message"=>"success" ,'data' => $data ]);

    } 
   /* @method : get user details
	* @param : Token and deviceID
	* Response : json
	* Return : User details	
   */
   
    public function get_user_details(Request $request)
    {
    	$user = JWTAuth::toUser($request->get('token'));
        $data['userID'] = $user->userID;
        $data['firstName'] = $user->first_name;
        $data['lastName'] = $user->last_name;
        $data['email'] = $user->email;
        return response()->json([ "status"=>1,"message"=>"success" ,'data' => $data ]);
    }
   /* @method : Email Verification
    * @param : token_id
    * Response : json
    * Return :token and email 
   */
   
    public function emailVerification(Request $request)
    {
        $verification_code = $request->get('verification_code');
        $email    = $request->get('email');

        if (Hash::check($email, $verification_code)) {
           $user = User::where('email',$email)->get()->count();
           if($user>0)
           {
              User::where('email',$email)->update(['status'=>1]);  
           }else{
            echo "Verification link is Invalid"; exit();
                return response()->json([ "status"=>0,"message"=>"Verification link is Invalid." ,'data' => '']);
           }
           echo "Email sucessfully verified"; exit();  
           return response()->json([ "status"=>1,"message"=>"Email sucessfully verified" ,'data' => '']);
        }else{
            echo "Verification link is Invalid"; exit();
            return response()->json([ "status"=>0,"message"=>"Verification link is Invalid." ,'data' => '']);
        }
    }
   
   /* @method : logout
    * @param : token
    * Response : "logout message"
    * Return : json response 
   */
    public function logout(Request $request)
    {   
        JWTAuth::invalidate($request->get('deviceToken'));

        return  response()->json([ 
                    "status"=>1,
                    "code"=> 200,
                    "message"=>"Successfully signout",
                    'data' => ""
                    ]
                );
    }
   /* @method : forget password
    * @param : token,email
    * Response : json
    * Return : json response 
    */
    public function forgetPassword(Request $request)
    {   
        $email = $request->get('email');
        //Server side valiation
        $validator = Validator::make($request->all(), [
            'email' => 'required|email'
        ]);

        $helper = new Helper;
        $temp_password =  $helper->generateRandomString(6);
        if ($validator->fails()) {
            $error_msg  =   [];
            foreach ( $validator->messages()->all() as $key => $value) {
                        array_push($error_msg, $value);     
                    }
                            
            return Response::json(array(
                'status' => 0,
                'message' => $error_msg[0],
                'data'  =>  ''
                )
            );
        }

        $user =   User::where('email',$email)->get();

        if($user->count()==0){
            return Response::json(array(
                'status' => 0,
                'message' => 'Email not found.',
                'data'  =>  ''
                )
            );
        }
        $user_data = User::find($user[0]->userID);
        $user_data->password = Hash::make($temp_password);
        $user_data->temp_password = $temp_password;
        $user_data->save();
      // Send Mail after forget password
        $email_content = array(
                        'receipent_email'=> $request->get('email'),
                        'subject'=>'Forgot Password',
                        'name' => $user[0]->first_name,
                        'temp_password' => $temp_password
                    );
        //print_r($email_content);
        $email_response = $helper->sendMail(
                                $email_content,
                                'forgot_password_link'
                            );
       return   response()->json(
                    [ 
                        "status"=>0,
                        "code"=> 200,
                        "message"=>"Temporary password has sent.Please check your mail.",
                        'data' => ''
                    ]
                );
    }

   /* @method : change password
    * @param : token,oldpassword, newpassword
    * Response : "message"
    * Return : json response 
   */
    public function changePassword(Request $request)
    {   
        $user = JWTAuth::toUser($request->get('deviceToken'));
        $user_id = $user->userID; 
        $old_password = $user->password;
        
        $validator = Validator::make($request->all(), [
            'oldPassword' => 'required',
            'newPassword' => 'required'
        ]);
        // Return Error Message
        if ($validator->fails()) {
            $error_msg  =   [];
            foreach ( $validator->messages()->all() as $key => $value) {
                        array_push($error_msg, $value);     
                    }
                            
            return Response::json(array(
                'status' => 0,
                'message' => $error_msg[0],
                'data'  =>  ''
                )
            );
        }

        if (Hash::check($old_password, $request->get('oldPassword'))) {

           $user_data =  User::find($user_id);
           $user_data->password =  Hash::make($request->get('newPassword'));
           return  response()->json([ 
                    "status"=>1,
                    "code"=> 200,
                    "message"=>"Password changed successfully",
                    'data' => ""
                    ]
                );
        }else
        {
            return Response::json(array(
                'status' => 0,
                'message' => "Old password mismatch",
                'data'  =>  ''
                )
            );
        }         
    }
   /* @method : get Postion
    * @param : position name
    * Response : json
    * Return : Postion details 
    */
   
    public function getPosition(Request $request,Position $position)
    {
        $user_email = $request->get('email');   
        $helper = new Helper;
        $corporate_group_name = $helper->getCorporateGroupName($request->get('email'));
        
        $position = $position->where('email','')
                        ->orWhere('corporate_group_name',$corporate_group_name)
                        ->get([
                            'id as positionId',
                            'position_name as positionName'
                        ]);

       if($position->count()>0){
            return  response()->json([ 
                        "status"=>1,
                         "code"=> 200,
                        "message"=>"Record found successfully" ,
                        'data' => $position
                        ]
                    );
       }else {
            return  response()->json([ 
                        "status"=>0,
                        "code"=> 404,
                        "message"=>"Record not found" ,
                        'data' => ""
                        ]
                    );
       }
    }
   /* @method : Add Postion
    * @param : position name
    * Response : json
    * Return : Postion details 
   */
    public function addPosition(Request $request,Position $position)
    {
       
        if(empty($request->get('positionName'))){
            return  response()->json([ 
                        "status"=>0,
                        "code"=> 404,
                        "message"=>"Position name is required",
                        'data' => ""
                        ]
                    );
        }
        if(empty($request->get('email'))){
            return  response()->json([ 
                        "status"=>0,
                        "code"=> 404,
                        "message"=>"Email is required",
                        'data' => ""
                        ]
                    );
        }
        $helper = new Helper;
        $corporate_group_name = $helper->getCorporateGroupName($request->get('email'));

        $duplicate_position = Position::where('corporate_group_name',$corporate_group_name)
                                    ->where('position_name',$request->get('positionName'))
                                    ->get();
        //dd($duplicate_position);
        if($duplicate_position->count()>0)
        {
            return  response()->json([ 
                        "status"=>0,
                        "code"=> 404,
                        "message"=>"Position name already exist",
                        'data' => ""
                        ]
                    );
        }    
        $input = $request->all();
        $position->position_name = $request->get('positionName');
        //$position->userID = empty($request->get('userID'))?$request->get('userID'):'';
        $position->corporate_group_name = $corporate_group_name;
        $position->email = $request->get('email');
        $position->save();
        $data = [
                'positionName'=>$position->position_name,
                'email'=>$request->get('email'),
                'positionId' => $position->id
                ];
        return  response()->json([ 
                    "status"=>1,
                    "code"=> 200,
                    "message"=>"Position successfully added",
                    'data' => $data
                    ]
                );
       
    }
   /* @method : get Criteria
    * @param : position name
    * Response : json
    * Return : Postion details 
    */
   
    public function getCriteria(Request $request,Criteria $criteria)
    {
        $user_id = $request->get('userID');   
        $helper = new Helper;
        
        $criteria = $criteria->where('created_by',0)
                        ->orWhere('created_by',$user_id)
                        ->get([
                            'id as criteriaID',
                            'interview_criteria as criteriaText'
                        ]);
       // dd($criteria);                
       if($criteria->count()>0){
            return  response()->json([ 
                        "status"=>1,
                         "code"=> 200,
                        "message"=>"Record found successfully" ,
                        'data' => $criteria
                        ]
                    );
       }else {
            return  response()->json([ 
                        "status"=>0,
                        "code"=> 404,
                        "message"=>"Record not found" ,
                        'data' => ""
                        ]
                    );
       }
    }

/* @method : Add Postion
    * @param : position name
    * Response : json
    * Return : Postion details 
   */
    public function addCriteria(Request $request,Criteria $criteria)
    {
        if(empty($request->get('criteriaText'))){
            return  response()->json([ 
                        "status"=>0, 
                        "message"=>"Criteria text is required",
                        'data' => ""
                        ]
                    );
        }
        if(empty($request->get('userID'))){
            return  response()->json([ 
                        "status"=>0,
                        "message"=>"User id is required",
                        'data' => ""
                        ]
                    );
        }
        $helper = new Helper;
       // $criteria_name = $helper->getCriteriaNameByuserId($request->get('userID'));

        $duplicate_criteria = Criteria::where('created_by',$request->get('userID'))
                                    ->where('interview_criteria',$request->get('criteriaText'))
                                    ->get();
        //dd($duplicate_position);
        if($duplicate_criteria->count()>0)
        {
            return  response()->json([ 
                        "status"=>0,
                        "message"=>"This criteria already exist",
                        'data' => ""
                        ]
                    );
        }    
        $input = $request->all();
        $criteria->interview_criteria = $request->get('criteriaText');
        $criteria->created_by = !empty($request->get('userID'))?$request->get('userID'):'';
        $criteria->save(); 
        $data = [
                    'criteriaText'=>$criteria->interview_criteria,
                    'userID'=>$request->get('userID'),
                    'criteriaID'=>$criteria->id
                ];

        return  response()->json([ 
                    "status"=>1,
                    "code"=> 200,
                    "message"=>"Criteria successfully added",
                    'data' => $data
                    ]
                );
       
    }

   /* @method : get Interviewer
    * @param : email
    * Response : json
    * Return : Interview details 
    */
   
    public function getInterviewer(Request $request)
    {
        $user_id = $request->get('email');   
        $helper = new Helper;
        // Create Company Group

        $email_id  = User::find($request->get('userID'));

        $getCorporateGroupName = $helper->getCorporateGroupName($email_id->email);
        
        $get_position = Position::where('corporate_group_name',$getCorporateGroupName)->get();

        $data = [];
        foreach ($get_position  as $key => $pos) {
            $user_data =  User::where('email',$pos->email)->get(['userID','first_name','last_name']);
           dd($user_data->count());
           if(($user_data->count())>=1)
           { 
              $data[] = [ 
                        'interviewerID'   => $user_data[0]->userID,
                        'interviewerText' => $user_data[0]->first_name.' '.$user_data[0]->last_name,
                        'positionName'    => $pos->position_name 
                      ];
           }else{

             return  response()->json([ 
                    "status"=>0,
                    "code"=> 404,
                    "message"=>"Record not found",
                    'data' => ""
                    ]
                );
           }
           
                     
        }
       dd($get_position);
       if($get_position->count())
       {
           return  response()->json([ 
                    "status"=>1,
                    "code"=> 200,
                    "message"=>"Record successfully found",
                    'data' => $data
                    ]
                ); 
        }else {
            return  response()->json([ 
                    "status"=>0,
                    "code"=> 404,
                    "message"=>"Record not found",
                    'data' => ""
                    ]
                );
        }
       
    }
   /* @method : get Interviewer
    * @param : email
    * Response : json
    * Return : Postion details 
    */
   
    public function addInterview(Request $request,Interview $interview)
    {
       
        //Server side valiation
        $validator = Validator::make($request->all(), [
            'condidateName'     => 'required',
            'shortDescription' => 'required'
        ]);
        // Return Error Message
        if ($validator->fails()) {
                    $error_msg  =   [];
            foreach ( $validator->messages()->all() as $key => $value) {
                        array_push($error_msg, $value);     
                    }
                            
            return Response::json(array(
                'status' => 0,
                'message' => $error_msg[0],
                'data'  =>  ''
                )
            );
        }
        $input_data = $request->all();
        $criteriaID = isset($input_data['criteria'][0]['criteriaID'])
                        ?
                        $input_data['criteria'][0]['criteriaID']
                        :
                        0;
                        
        $interviewerID = isset($input_data['interviewer'][0]['interviewerID'])
                            ?
                            $input_data['interviewer'][0]['interviewerID']
                            :
                            0;
        if($criteriaID==0){
            return  response()->json([ 
                    "status"    =>  0,
                    "message"   =>  "Criteria field is required",
                    'data'      =>  ""
                   ]
                );
        }
        if($interviewerID==0){
            return  response()->json([ 
                    "status"    =>  0,
                    "message"   =>  "Interviewer field is required",
                    'data'      =>  ""
                   ]
                );
        }
        $criteria_id = '';
        $interviewer_id = '';
        foreach ($input_data['criteria'] as $key => $cid) {
            $criteria_id = $criteria_id.','.$cid['criteriaID'] ;
        }
        foreach ($input_data['interviewer'] as $key => $int_id) {
            $interviewer_id = $interviewer_id.','.$int_id['interviewerID'] ;
        }  
        //
        $interview->condidate_name      = $request->get('condidateName');
        $interview->short_description   = $request->get('shortDescription');
        $interview->interviewerID       = ltrim($interviewer_id,',');
        $interview->criteriaID          = ltrim($criteria_id,',');
        $interview->interview_create_by = $request->get('userID');
        //dd($interview);
        $interview->save();

        if($interview->save())
        {
            return  response()->json([ 
                    "status"=>1,
                    "code"=> 200,
                    "message"=>"Interview added successfully",
                    'data' => $request->all()
                   ]
                ); 
        }


    }
}

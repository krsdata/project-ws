<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Log\Writer;
use Monolog\Logger as Monolog;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Support\Facades\Storage;
use App\Http\Requests;
use App\Http\Controllers\Controller;
use Illuminate\Contracts\Encryption\DecryptException;
use App\Helpers\Helper as Helper;
use App\User;
use App\Position;
use Config;
use View;
use Redirect; 
use Validator;
use Response;
use Auth;
use Crypt;
use Cookie;
use Hash;
use Lang;
use JWTAuth;
use Input;
use Closure;


class APIController extends Controller
{
	
   /* @method : register
	* @param : email,password,deviceID,firstName,lastName
	* Response : json
	* Return : token and user details
	* Author : kundan Roy
	* Calling Method : get	
    */



    public function register(Request $request,User $user)
    {        
    	$input['first_name'] 	= $request->get('firstName');
    	$input['last_name'] 	= $request->get('lastName'); 
    	$input['email'] 		= $request->get('email'); 
    	$input['password'] 	    = Hash::make($request->get('password'));
    	$input['deviceID'] 	    = ($request->get('deviceID'))?$request->get('deviceID'):'';
        $input['positionID']    = ($request->get('positionName'))?$request->get('positionName'):'';

        //Server side valiation
        $validator = Validator::make($request->all(), [
            'email' => 'required|email|unique:t_user',
            'firstName' => 'required',
            'lastName' => 'required',
            'password' => 'required',
            'positionName' => 'required'
        ]);
        // Return Error Message
        if ($validator->fails()) {
                   	$error_msg	=	[];
	        foreach ( $validator->messages()->all() as $key => $value) {
	        			array_push($error_msg, $value);		
	        		}
	        		 		
          	return Response::json(array(
	          	'status' => 0,
	            'message' => $error_msg[0],
	            'data'	=>	''
	            )
          	);
        }
        //echo json_encode($input); die;
        $helper = new Helper;
        // Create USER
        $user = User::create($input); 
        // Create Company Group
        $helper->createCompanyGroup($request->get('email'),$user->userID);
        // Send Mail after Sign Up
        $email_content = array('receipent_email'=> $request->get('email'),'subject'=>'Signup email verification');
        $verification_email = $helper->sendMailFrontEnd($email_content,'verification_link',['name'=> $request->get('firstName')]);
        
        return response()->json([ "status"=>1,"message"=>"Registration success.Please verify your email.",'data'=>$request->except('password')]);
    }
   /* @method : login
	* @param : email,password and deviceID
	* Response : json
	* Return : token and user details
	* Author : kundan Roy	
    */
    public function login(Request $request)
    {
    	$input = $request->all();

    	if (!$token = JWTAuth::attempt(['email'=>$request->get('email'),'password'=>$request->get('password'),'status'=>1])) {
            return response()->json([ "status"=>0,"message"=>"Invalid email or password.Try again !" ,'data' => '' ]);
        }

        $user = JWTAuth::toUser($token); 
        $data['deviceToken'] = $token;
        $data['userID'] = $user->userID;
        $data['firstName'] = $user->first_name;
        $data['lastName'] = $user->last_name;
        $data['email'] = $user->email;

        if(!$user->status)
        {
            return response()->json([ "status"=>0,"message"=>"Invalid email or password.Try again !" ,'data' => '' ]);   
        }
        $user = User::find($user->userID);
        $user->deviceID  = $request->get('deviceID');
        $user->save();

    	return response()->json([ "status"=>1,"message"=>"success" ,'data' => $data ]);

    } 
   /* @method : get user details
	* @param : Token and deviceID
	* Response : json
	* Return : User details	
   */
   
    public function get_user_details(Request $request)
    {
    	$user = JWTAuth::toUser($request->get('token'));
        $data['userID'] = $user->userID;
        $data['firstName'] = $user->first_name;
        $data['lastName'] = $user->last_name;
        $data['email'] = $user->email;
        return response()->json([ "status"=>1,"message"=>"success" ,'data' => $data ]);
    }
   /* @method : Email Verification
    * @param : token_id
    * Response : json
    * Return :token and email 
   */
   
    public function emailVerification(Request $request)
    {
        $verification_code = $request->get('verification_code');
        $email    = $request->get('email');

        if (Hash::check($email, $verification_code)) {
           $user = User::where('email',$email)->get()->count();
           if($user>0)
           {
              User::where('email',$email)->update(['status'=>1]);  
           }else{
                return response()->json([ "status"=>0,"message"=>"Verification link is Invalid." ,'data' => '']);
           } 
           return response()->json([ "status"=>1,"message"=>"Email sucessfully verified" ,'data' => '']);
        }else{
            return response()->json([ "status"=>0,"message"=>"Verification link is Invalid." ,'data' => '']);
        }
    }
   /* @method : get Postion
    * @param : position name
    * Response : json
    * Return : Postion details 
   */
   
    public function getPosition(Request $request,Position $position)
    {
        $user_email = $request->get('email');   
        $helper = new Helper;
        $corporate_group_name = $helper->getCorporateGroupName($request->get('email'));
        
        $position = $position->where('email','')
                        ->orWhere('corporate_group_name',$corporate_group_name)
                        ->get([
                            'id as positionId',
                            'position_name as positionName'
                        ]);

       if($position->count()>0){
            return  response()->json([ 
                        "status"=>1,
                         "code"=> 200,
                        "message"=>"Record found successfully" ,
                        'data' => $position
                        ]
                    );
       }else {
            return  response()->json([ 
                        "status"=>0,
                        "code"=> 404,
                        "message"=>"Record not found" ,
                        'data' => ""
                        ]
                    );
       }
    }
   /* @method : Add Postion
    * @param : position name
    * Response : json
    * Return : Postion details 
   */
    public function addPosition(Request $request,Position $position)
    {
       
        if(empty($request->get('positionName'))){
            return  response()->json([ 
                        "status"=>0,
                        "code"=> 404,
                        "message"=>"Position name is required",
                        'data' => ""
                        ]
                    );
        }
        if(empty($request->get('email'))){
            return  response()->json([ 
                        "status"=>0,
                        "code"=> 404,
                        "message"=>"Email is required",
                        'data' => ""
                        ]
                    );
        }
        $helper = new Helper;
        $corporate_group_name = $helper->getCorporateGroupName($request->get('email'));

        $duplicate_position = Position::where('corporate_group_name',$corporate_group_name)
                                    ->where('position_name',$request->get('positionName'))
                                    ->get();
        //dd($duplicate_position);
        if($duplicate_position->count()>0)
        {
            return  response()->json([ 
                        "status"=>0,
                        "code"=> 404,
                        "message"=>"Position name already exist",
                        'data' => ""
                        ]
                    );
        }    
        $input = $request->all();
        $position->position_name = $request->get('positionName');
        $position->userID = !empty($request->get('userID'))?$request->get('userID'):'';
        $position->corporate_group_name = $corporate_group_name;
        $position->email = $request->get('email');
        $position->save();
        $data = ['positionName'=>$position->position_name,'email'=>$request->get('email')];
        return  response()->json([ 
                    "status"=>1,
                    "code"=> 200,
                    "message"=>"Position successfully added",
                    'data' => $data
                    ]
                );
       
    }
}
